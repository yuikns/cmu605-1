import java.io.*;
import java.util.*;

public class NBTest {

    public static void main(String[] args) {
        /* First read file and initlize*/
        Map<String, List<Integer>> word2IndexList = new HashMap<String, List<Integer>>();
        Map<Integer, DocModel> index2Doc = new HashMap<Integer, DocModel>();
        double ALPHA = 1;

        try {
            BufferedReader br = new BufferedReader(
                                    new FileReader(args[0]));
            int index = 0;
            String readline;
            while (null != (readline = br.readLine())) {
                List<String> tokens = Functions.tokenizeDoc(readline, 0);
                for (String word : tokens) {
                    List<Integer> tmp = new ArrayList<Integer>();
                    if (word2IndexList.containsKey(word)) tmp = word2IndexList.get(word);
                    tmp.add(index);
                    word2IndexList.put(word, tmp);
                    DocModel doc = new DocModel(index);
                    index2Doc.put(index, doc);
                }
                index++;
            }
            br.close();
        } catch(IOException e) {
            e.printStackTrace();
        }

        /* print out to debug */
        //for (String key : word2IndexList.keySet()) {
        //    System.out.println(key + "\t" + word2IndexList.get(key));
        //}
        //System.out.println("the word2indexlist size is " + word2IndexList.size());

        /* start parsing and record merge count info*/
        Map<String, Integer> label2Cnt = new HashMap<String, Integer>();
        Map<String, Integer> label2WordCnt = new HashMap<String, Integer>();
        int totalLabelCnt = 0;
        int testWordCnt = word2IndexList.size();
        try {
            BufferedReader br2 =
                new BufferedReader(new InputStreamReader(System.in));
            String readline2;
            Map<String, Integer> tmpLabel2Cnt = new HashMap<String, Integer>();
            String previousKey = "null";
            while (null != (readline2 = br2.readLine())) {
                Integer flag = Integer.parseInt(readline2.substring(0, 1));
                if (flag == 1) {
                    String[] pair = readline2.substring(1).split("\t");
                    label2Cnt.put(pair[0], Integer.parseInt(pair[1]));
                } else if (flag == 3){
                    String[] pair = readline2.substring(1).split("\t");
                    label2WordCnt.put(pair[0], Integer.parseInt(pair[1]));
                } else if (flag == 2) {
                    totalLabelCnt = Integer.parseInt(readline2.split("\t")[1]);
                } else if (flag == 4) {
                    /* if the flag is 4, then the 1,2,3 was finished, first
                     * initliaze the doc with label score */
                    String[] words = readline2.substring(1).split("\t");
                    Integer tmpCnt = Integer.parseInt(words[1]);
                    String[] wordLabelPair = words[0].split("&Y=");
                    if(wordLabelPair[0].equals(previousKey)) {
                        tmpLabel2Cnt.put(wordLabelPair[1], tmpCnt);
                    } else {
                        if (!previousKey.equals("null")) {
                            if (word2IndexList.containsKey(wordLabelPair[0])) {
                                for (Integer index : word2IndexList.get(wordLabelPair[0])) {
                                    DocModel doc = index2Doc.get(index);
                                    for (String label : label2WordCnt.keySet()) {
                                        double score = 0.0;
                                        if (tmpLabel2Cnt.containsKey(label)) {
                                            int labelCnt = tmpLabel2Cnt.get(label);
                                            score = Math.log(((double)labelCnt + ALPHA) / (double)(label2WordCnt.get(label) + ALPHA * testWordCnt));
                                        } else {
                                            score = Math.log(((double)ALPHA) / (double)(label2WordCnt.get(label) + ALPHA * testWordCnt));
                                        }
                                        doc.setLabelScore(label, score);
                                    }
                                }
                            }

                        }
                        previousKey = wordLabelPair[0];
                        tmpLabel2Cnt.clear();
                        tmpLabel2Cnt.put(wordLabelPair[1], tmpCnt);
                    }
                }

            }
        } catch(IOException e) {
            e.printStackTrace();
        }

        /* calculate label score */
        Map<String, Double> label2LabelScore = new HashMap<String, Double>();
        for (String label : label2Cnt.keySet()) {
            double labelScore = Math.log((double)(label2Cnt.get(label) + ALPHA) / ((double)(totalLabelCnt + ALPHA * label2Cnt.size())));
            label2LabelScore.put(label, labelScore);
        }
        label2Cnt.clear();


        for (Integer index : index2Doc.keySet()) {
            DocModel tmpDoc = index2Doc.get(index);
            //String maxLabel = tmpDoc.findMaxLabel(label2LabelScore);
            System.out.println("doc id:" + index);
            for (String labelKey : tmpDoc.label2Score.keySet()) {
                System.out.println(labelKey + "\t" + tmpDoc.label2Score.get(labelKey));
            }
        }

    }
}
